type token =
  | COLON
  | COMMA
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | MOD
  | PLUSPLUS
  | MINUSMINUS
  | NOT
  | AND
  | OR
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | ELSEIF
  | WHILE
  | FOR
  | INT
  | BOOL
  | FLOAT
  | STRING
  | VOID
  | LIST_PUSH
  | LIST_GET
  | LIST_SET
  | LIST_POP
  | LIST_SIZE
  | HASH
  | LIST_SLICE
  | LIST_CLEAR
  | LIST_REVERSE
  | LIST_INSERT
  | LIST_REMOVE
  | LIST_FIND
  | ILITERAL of (int)
  | BLITERAL of (bool)
  | SLITERAL of (string)
  | FLITERAL of (float)
  | ID of (string)
  | LIST
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 64 "parser.ml"
let yytransl_const = [|
  257 (* COLON *);
  258 (* COMMA *);
  259 (* SEMICOLON *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* LBRACK *);
  265 (* RBRACK *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* MOD *);
  272 (* PLUSPLUS *);
  273 (* MINUSMINUS *);
  274 (* NOT *);
  275 (* AND *);
  276 (* OR *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQ *);
  281 (* GT *);
  282 (* GEQ *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* ELSEIF *);
  287 (* WHILE *);
  288 (* FOR *);
  289 (* INT *);
  290 (* BOOL *);
  291 (* FLOAT *);
  292 (* STRING *);
  293 (* VOID *);
  294 (* LIST_PUSH *);
  295 (* LIST_GET *);
  296 (* LIST_SET *);
  297 (* LIST_POP *);
  298 (* LIST_SIZE *);
  299 (* HASH *);
  300 (* LIST_SLICE *);
  301 (* LIST_CLEAR *);
  302 (* LIST_REVERSE *);
  303 (* LIST_INSERT *);
  304 (* LIST_REMOVE *);
  305 (* LIST_FIND *);
  311 (* LIST *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* ILITERAL *);
  307 (* BLITERAL *);
  308 (* SLITERAL *);
  309 (* FLITERAL *);
  310 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\012\000\012\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\004\000\000\000\
\002\000\003\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\007\000\009\000\007\000\005\000\007\000\
\009\000\005\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\003\000\003\000\003\000\003\000\004\000\006\000\004\000\
\004\000\004\000\002\000\008\000\006\000\006\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\076\000\000\000\010\000\011\000\012\000\013\000\
\014\000\000\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\018\000\000\000\015\000\000\000\000\000\000\000\008\000\
\000\000\000\000\016\000\000\000\000\000\009\000\017\000\000\000\
\000\000\000\000\000\000\019\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\038\000\039\000\040\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\048\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\050\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\023\000\
\071\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\064\000\000\000\027\000\
\000\000\000\000\000\000\000\000\000\000\031\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\070\000\000\000\069\000\025\000\
\000\000\028\000\000\000\000\000\000\000\032\000\030\000\000\000\
\000\000\068\000\000\000\026\000\029\000\033\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\022\000\029\000\033\000\
\023\000\063\000\064\000\132\000\069\000\070\000"

let yysindex = "\021\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\235\254\000\000\000\000\000\000\226\254\099\255\011\255\
\000\255\000\000\099\255\000\000\228\254\040\255\050\255\000\000\
\047\255\099\255\000\000\022\255\099\255\000\000\000\000\023\255\
\149\255\075\255\043\255\000\000\000\000\043\255\026\255\027\255\
\043\255\043\255\079\255\084\255\085\255\087\255\098\255\100\255\
\101\255\102\255\061\255\116\255\125\255\133\255\134\255\135\255\
\136\255\000\000\000\000\000\000\000\000\206\255\000\000\067\001\
\080\000\185\001\200\255\202\002\114\255\144\255\000\000\000\000\
\000\000\202\002\155\255\043\255\043\255\043\255\109\255\110\255\
\121\255\124\255\132\255\000\000\151\255\167\255\170\255\171\255\
\172\255\179\255\043\255\043\255\043\255\000\000\000\000\000\000\
\043\255\043\255\043\255\043\255\043\255\043\255\043\255\043\255\
\043\255\043\255\043\255\043\255\043\255\043\255\000\000\000\000\
\000\000\043\255\000\000\207\001\229\001\165\255\177\255\207\255\
\232\255\168\255\230\255\234\255\253\255\255\255\235\255\003\000\
\004\000\005\000\167\002\010\000\202\002\025\255\025\255\000\000\
\000\000\000\000\124\000\219\002\159\255\159\255\181\000\181\000\
\181\000\181\000\185\002\202\002\125\000\125\000\043\255\043\255\
\043\255\043\255\000\000\000\000\043\255\009\000\011\000\043\255\
\043\255\043\255\000\000\002\000\043\255\000\000\240\255\000\000\
\091\001\251\001\017\002\088\255\018\001\000\000\000\000\043\001\
\039\002\061\002\043\255\006\000\125\000\043\255\022\000\000\000\
\043\255\043\255\043\255\025\000\000\000\115\001\000\000\000\000\
\027\000\000\000\083\002\105\002\127\002\000\000\000\000\125\000\
\030\000\000\000\039\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\001\000\000\000\000\
\008\255\000\000\000\000\119\255\000\000\007\255\000\000\000\000\
\000\000\045\255\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\043\000\254\255\179\000\000\000\
\000\000\000\000\210\255\084\000\140\255\153\002\205\000\214\000\
\240\000\249\000\057\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\163\001\050\000\000\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\050\001\000\000\020\000\000\000\000\000\047\001\
\000\000\111\255\221\255\222\255\004\001\000\000"

let yytablesize = 1013
let yytable = "\066\000\
\011\000\015\000\068\000\167\000\168\000\073\000\074\000\075\000\
\041\000\041\000\041\000\073\000\041\000\018\000\019\000\073\000\
\041\000\041\000\041\000\041\000\041\000\001\000\041\000\016\000\
\020\000\024\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\017\000\192\000\099\000\100\000\021\000\101\000\
\116\000\117\000\074\000\118\000\025\000\028\000\035\000\036\000\
\032\000\036\000\038\000\026\000\027\000\036\000\204\000\068\000\
\131\000\133\000\039\000\040\000\041\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\030\000\034\000\018\000\148\000\071\000\
\072\000\047\000\076\000\049\000\050\000\051\000\052\000\077\000\
\078\000\185\000\079\000\057\000\058\000\059\000\060\000\061\000\
\065\000\097\000\098\000\099\000\100\000\080\000\101\000\081\000\
\082\000\083\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\084\000\169\000\170\000\171\000\172\000\085\000\
\074\000\173\000\113\000\074\000\176\000\177\000\178\000\074\000\
\086\000\074\000\180\000\005\000\006\000\007\000\008\000\009\000\
\087\000\088\000\089\000\090\000\051\000\051\000\051\000\190\000\
\051\000\114\000\074\000\193\000\051\000\195\000\196\000\197\000\
\035\000\010\000\036\000\037\000\038\000\115\000\051\000\051\000\
\051\000\051\000\119\000\120\000\039\000\040\000\041\000\151\000\
\097\000\098\000\099\000\100\000\155\000\101\000\121\000\042\000\
\043\000\122\000\152\000\044\000\045\000\106\000\107\000\108\000\
\109\000\123\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\035\000\124\000\036\000\112\000\038\000\
\153\000\091\000\058\000\058\000\058\000\092\000\058\000\039\000\
\040\000\041\000\058\000\093\000\125\000\094\000\095\000\126\000\
\127\000\128\000\042\000\043\000\058\000\058\000\044\000\045\000\
\129\000\154\000\156\000\157\000\160\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\042\000\042\000\
\042\000\158\000\042\000\159\000\161\000\162\000\042\000\042\000\
\042\000\163\000\165\000\174\000\181\000\175\000\191\000\179\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\194\000\072\000\019\000\198\000\019\000\019\000\019\000\200\000\
\205\000\005\000\006\000\007\000\008\000\009\000\019\000\019\000\
\019\000\206\000\006\000\061\000\061\000\061\000\007\000\061\000\
\035\000\019\000\019\000\061\000\072\000\019\000\019\000\010\000\
\035\000\036\000\035\000\035\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\024\000\031\000\024\000\
\024\000\024\000\067\000\091\000\059\000\059\000\059\000\110\000\
\059\000\024\000\024\000\024\000\059\000\093\000\130\000\094\000\
\095\000\000\000\000\000\075\000\024\000\024\000\075\000\059\000\
\024\000\024\000\075\000\000\000\000\000\000\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\035\000\000\000\036\000\000\000\038\000\097\000\098\000\099\000\
\100\000\000\000\101\000\000\000\039\000\040\000\041\000\000\000\
\104\000\105\000\106\000\107\000\108\000\109\000\000\000\042\000\
\043\000\000\000\000\000\044\000\045\000\000\000\000\000\000\000\
\000\000\000\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\043\000\043\000\043\000\000\000\043\000\
\000\000\000\000\000\000\043\000\043\000\043\000\097\000\098\000\
\099\000\100\000\000\000\101\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\053\000\053\000\053\000\
\000\000\053\000\000\000\000\000\000\000\053\000\055\000\055\000\
\055\000\000\000\055\000\000\000\000\000\000\000\055\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\054\000\054\000\054\000\000\000\054\000\000\000\000\000\000\000\
\054\000\056\000\056\000\056\000\000\000\056\000\000\000\000\000\
\000\000\056\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\186\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\000\000\
\101\000\000\000\000\000\000\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\187\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\182\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\199\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\041\000\041\000\041\000\
\000\000\041\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\064\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\064\000\064\000\064\000\
\000\000\064\000\000\000\000\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\111\000\000\000\000\000\
\000\000\000\000\097\000\098\000\099\000\100\000\000\000\101\000\
\000\000\000\000\000\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\149\000\000\000\000\000\000\000\000\000\
\097\000\098\000\099\000\100\000\000\000\101\000\000\000\000\000\
\000\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\150\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\000\000\101\000\000\000\000\000\000\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\183\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\184\000\000\000\000\000\
\000\000\000\000\097\000\098\000\099\000\100\000\000\000\101\000\
\000\000\000\000\000\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\188\000\000\000\000\000\000\000\000\000\
\097\000\098\000\099\000\100\000\000\000\101\000\000\000\000\000\
\000\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\189\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\000\000\101\000\000\000\000\000\000\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\201\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\202\000\000\000\000\000\
\000\000\000\000\097\000\098\000\099\000\100\000\000\000\101\000\
\000\000\000\000\000\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\203\000\000\000\000\000\000\000\000\000\
\097\000\098\000\099\000\100\000\000\000\101\000\000\000\000\000\
\000\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\052\000\052\000\052\000\000\000\052\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\052\000\052\000\052\000\164\000\
\097\000\098\000\099\000\100\000\000\000\101\000\000\000\000\000\
\000\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\166\000\097\000\098\000\099\000\100\000\000\000\101\000\
\000\000\000\000\000\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\097\000\098\000\099\000\100\000\000\000\
\101\000\000\000\000\000\000\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\097\000\098\000\099\000\100\000\
\000\000\101\000\000\000\000\000\000\000\102\000\000\000\104\000\
\105\000\106\000\107\000\108\000\109\000"

let yycheck = "\035\000\
\000\000\023\001\038\000\149\000\150\000\041\000\042\000\042\000\
\001\001\002\001\003\001\005\001\005\001\003\001\004\001\009\001\
\009\001\010\001\011\001\012\001\013\001\001\000\015\001\054\001\
\025\001\054\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\015\000\181\000\012\001\013\001\019\000\015\001\
\076\000\077\000\078\000\078\000\005\001\026\000\004\001\003\001\
\029\000\005\001\008\001\002\001\006\001\009\001\200\000\091\000\
\092\000\093\000\016\001\017\001\018\001\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\054\001\054\001\003\001\114\000\054\001\
\054\001\039\001\004\001\041\001\042\001\043\001\044\001\004\001\
\004\001\002\001\004\001\049\001\050\001\051\001\052\001\053\001\
\054\001\010\001\011\001\012\001\013\001\004\001\015\001\004\001\
\004\001\004\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\054\001\151\000\152\000\153\000\154\000\004\001\
\002\001\157\000\009\001\005\001\160\000\161\000\162\000\009\001\
\004\001\165\000\165\000\033\001\034\001\035\001\036\001\037\001\
\004\001\004\001\004\001\004\001\001\001\002\001\003\001\179\000\
\005\001\002\001\182\000\182\000\009\001\185\000\186\000\187\000\
\004\001\055\001\006\001\007\001\008\001\003\001\019\001\020\001\
\021\001\022\001\054\001\054\001\016\001\017\001\018\001\003\001\
\010\001\011\001\012\001\013\001\005\001\015\001\054\001\027\001\
\028\001\054\001\002\001\031\001\032\001\023\001\024\001\025\001\
\026\001\054\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\004\001\054\001\006\001\007\001\008\001\
\002\001\004\001\001\001\002\001\003\001\008\001\005\001\016\001\
\017\001\018\001\009\001\014\001\054\001\016\001\017\001\054\001\
\054\001\054\001\027\001\028\001\019\001\020\001\031\001\032\001\
\054\001\002\001\005\001\002\001\002\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\001\001\002\001\
\003\001\005\001\005\001\005\001\002\001\002\001\009\001\010\001\
\011\001\005\001\001\001\003\001\029\001\003\001\009\001\014\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\003\001\009\001\004\001\003\001\006\001\007\001\008\001\005\001\
\003\001\033\001\034\001\035\001\036\001\037\001\016\001\017\001\
\018\001\003\001\005\001\001\001\002\001\003\001\005\001\005\001\
\003\001\027\001\028\001\009\001\005\001\031\001\032\001\055\001\
\001\001\001\001\009\001\005\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\004\001\029\000\006\001\
\007\001\008\001\036\000\004\001\001\001\002\001\003\001\008\001\
\005\001\016\001\017\001\018\001\009\001\014\001\091\000\016\001\
\017\001\255\255\255\255\002\001\027\001\028\001\005\001\020\001\
\031\001\032\001\009\001\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\004\001\255\255\006\001\255\255\008\001\010\001\011\001\012\001\
\013\001\255\255\015\001\255\255\016\001\017\001\018\001\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\027\001\
\028\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\255\255\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\010\001\011\001\
\012\001\013\001\255\255\015\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\002\001\003\001\
\255\255\005\001\255\255\255\255\255\255\009\001\001\001\002\001\
\003\001\255\255\005\001\255\255\255\255\255\255\009\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\002\001\003\001\255\255\005\001\255\255\255\255\255\255\
\009\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\009\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\015\001\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\005\001\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\015\001\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\005\001\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\015\001\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\010\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\255\255\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001"

let yynames_const = "\
  COLON\000\
  COMMA\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  MOD\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  NOT\000\
  AND\000\
  OR\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  ELSEIF\000\
  WHILE\000\
  FOR\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  VOID\000\
  LIST_PUSH\000\
  LIST_GET\000\
  LIST_SET\000\
  LIST_POP\000\
  LIST_SIZE\000\
  HASH\000\
  LIST_SLICE\000\
  LIST_CLEAR\000\
  LIST_REVERSE\000\
  LIST_INSERT\000\
  LIST_REMOVE\000\
  LIST_FIND\000\
  LIST\000\
  EOF\000\
  "

let yynames_block = "\
  ILITERAL\000\
  BLITERAL\000\
  SLITERAL\000\
  FLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 40 "parser.mly"
            ( _1 )
# 571 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                  ( ([], []))
# 577 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 44 "parser.mly"
                  ( ((_2 :: fst _1), snd _1) )
# 585 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 45 "parser.mly"
                  ( (fst _1, (_2 :: snd _1)) )
# 593 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'func_formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'var_decl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 50 "parser.mly"
  ( { typ     = _1;
      fname   = _2;
      formals = List.rev _4;
      locals  = List.rev _7;
      body    = List.rev _8 } )
# 608 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                    ( [] )
# 614 "parser.ml"
               : 'func_formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_formals_list) in
    Obj.repr(
# 58 "parser.mly"
                     ( _1 )
# 621 "parser.ml"
               : 'func_formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                                 ( [(_1, _2)] )
# 629 "parser.ml"
               : 'func_formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'func_formals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                                 ( (_3, _4) :: _1 )
# 638 "parser.ml"
               : 'func_formals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                  ( Int )
# 644 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                  ( Bool )
# 650 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                  ( Float )
# 656 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                  ( String )
# 662 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                  ( Void )
# 668 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
                  ( List(_3) )
# 675 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                ( [] )
# 681 "parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 76 "parser.mly"
                          ( _2 :: _1 )
# 689 "parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 80 "parser.mly"
                   ( (_1, _2) )
# 697 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                 ( [] )
# 703 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                 ( _2 :: _1 )
# 711 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                            ( Expr _1 )
# 718 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 89 "parser.mly"
                                            ( Return _2 )
# 725 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 90 "parser.mly"
                                            ( Block(List.rev _2) )
# 732 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 740 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                            ( If(_3, _5, _7) )
# 749 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                            ( For(_3, _5, _7, _9) )
# 759 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                                            ( While(_3, _5) )
# 767 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                                  ( ListPush(_3, _5) )
# 775 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                                            ( ListSet(_3, _5, _7) )
# 784 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                                      ( ListSet(_1, _3, _6) )
# 793 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 99 "parser.mly"
                                            ( ListClear(_3) )
# 800 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                                    ( ListRemove(_3, _5) )
# 808 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                                               ( ListInsert(_3, _5, _7) )
# 817 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 102 "parser.mly"
                                                ( ListReverse(_3) )
# 824 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                ( Noexpr )
# 830 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                ( _1 )
# 837 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "parser.mly"
                                          ( ILiteral(_1) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 111 "parser.mly"
                                          ( BLiteral(_1) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
                                          ( SLiteral(_1) )
# 858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 113 "parser.mly"
                                          ( FLiteral(_1) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                                          ( Id(_1) )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                                          ( Binop(_1, Add, _3) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                                          ( Binop(_1, Sub, _3) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                                          ( Binop(_1, Mult, _3) )
# 896 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                          ( Binop(_1, Div, _3) )
# 904 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                                          ( Binop(_1, Mod, _3) )
# 912 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                                          ( Unop(PlusPlusPre, Id(_2)) )
# 919 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                                          ( Unop(MinusMinusPre, Id(_2)) )
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 122 "parser.mly"
                                          ( Unop(PlusPlusPost, Id(_1)) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 123 "parser.mly"
                                          ( Unop(MinusMinusPost, Id(_1)) )
# 940 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                                          ( Binop(_1, Equal, _3) )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                          ( Binop(_1, Neq, _3) )
# 956 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                          ( Binop(_1, Less, _3) )
# 964 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                          ( Binop(_1, Greater, _3) )
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                          ( Binop(_1, Leq, _3) )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                          ( Binop(_1, Geq, _3) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                          ( Unop(Not, _2) )
# 995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                          ( Binop(_1, And, _3) )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                          ( Binop(_1, Or, _3) )
# 1011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                          ( _2 )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                          ( Assign(_1, _3) )
# 1026 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 135 "parser.mly"
                                         ( Call(_1, _3) )
# 1034 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                          ( ListGet(_3, _5) )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                          ( ListGet(_1, _3) )
# 1050 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 138 "parser.mly"
                                          ( ListPop(_3) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 139 "parser.mly"
                                          ( ListSize(_3) )
# 1064 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parser.mly"
                                          ( ListSize(_2) )
# 1071 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                                                    ( ListSlice(_3, _5, _7) )
# 1080 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 142 "parser.mly"
                                                  ( ListSlice(_1, _3, _5) )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                                          ( ListFind(_3, _5) )
# 1097 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 144 "parser.mly"
                                          ( ListLiteral(_2) )
# 1104 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                  ( [] )
# 1110 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 148 "parser.mly"
               ( List.rev _1 )
# 1117 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                            ( [_1] )
# 1124 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                         ( _3 :: _1 )
# 1132 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
